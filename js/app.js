// webshala: https://www.youtube.com/watch?v=J8QbjXdVl9c nyom√°n 

const questionNumber = document.querySelector(".question-number");
const questionText = document.querySelector(".question-text");
const questionBlock = document.querySelector(".question-block");
const qblData = document.querySelector(".qbl-data");
const langData = document.querySelector(".question-block pre");
const optionContainer = document.querySelector(".option-container");
const answersIndicatorContainer = document.querySelector(".answers-indicator");
const explanationContainer = document.querySelector(".explanation");
const homeBox = document.querySelector(".home-box");
const quizBox = document.querySelector(".quiz-box");
const resultBox = document.querySelector(".result-box");
const sourceBox = document.querySelector(".source-box");
const questionLimit = 12;

let questionCounter = 0;
let currentQuestion;
let availableQuestions = [];
let roundQuestions = [];
let availableOptions = [];
let correctAnswers = 0;
let attempt = 0;

// a k√©rd√©seket az 'availableQuestions' t√∂mbbe helyezz√ºk
function setAvailableQuestions() {
  const totalQuestion = quiz.length;
  for (let i = 0; i < totalQuestion; i++) {
    availableQuestions.push(quiz[i]);
  }
}

// k√©rd√©ssz√°m, k√©rd√©sek √©s v√°laszok be√°ll√≠t√°sa
function getNewQuestion() {
  // k√©rd√©ssz√°m be√°ll√≠t√°sa
  questionNumber.innerHTML = (questionCounter + 1) + " / " + questionLimit + ". k√©rd√©s";
  // k√©rd√©s sz√∂veg√©nek be√°ll√≠t√°sa
  // v√©letlenszer≈± k√©rd√©slek√©rdez√©s
  const questionIndex = availableQuestions[Math.floor(Math.random() * availableQuestions.length)];
  currentQuestion = questionIndex;
  questionText.innerHTML = currentQuestion.q;
  // a 'questionIndex' poz√≠ci√≥j√°nak kinyer√©se az 'availableQuestion' t√∂mbb≈ël
  const index1 = availableQuestions.indexOf(questionIndex);
  roundQuestions.push(availableQuestions[index1]);
  // elt√°vol√≠tja a 'questionIndex' √©rt√©ket az 'availableQuestion' t√∂mbb≈ël, hogy a k√©rd√©s ne ism√©tl≈ëdj√∂n meg
  availableQuestions.splice(index1, 1);
  if (currentQuestion.hasOwnProperty("img")) {
    const img = document.createElement("img");
    img.src = currentQuestion.img;
    questionText.appendChild(img);
  }
  if (currentQuestion.hasOwnProperty("qb")) {
    questionBlock.classList.remove("hide");
    langData.removeAttribute("class");
    qblData.removeAttribute("class");
    langData.classList.add("language-" + currentQuestion.qb[1]);
    qblData.innerHTML = currentQuestion.qb[0];
    Prism.highlightAll();
  } else {
    qblData.innerHTML = "";
    questionBlock.classList.add("hide");
  }

  // v√°laszok be√°ll√≠t√°sa
  // a v√°laszok sz√°m√°nak lek√©rdez√©se
  const optionLen = currentQuestion.options.length;
  // a v√°laszokat az 'availableOptions' t√∂mbbe tessz√ºk
  for (let i = 0; i < optionLen; i++) {
    availableOptions.push(i);
  }
  optionContainer.innerHTML = '';
  let animationDelay = 0.15;
  // v√°laszok l√©trehoz√°sa html-ben
  for (let i = 0; i < optionLen; i++) {
    // v√©letlenszer≈± v√°laszsorrend
    const optonIndex = availableOptions[Math.floor(Math.random() * availableOptions.length)];
    // az 'optonIndex' poz√≠ci√≥j√°nak kinyer√©se az 'availableOptions' t√∂mbb≈ël
    const index2 = availableOptions.indexOf(optonIndex);
    // t√°vol√≠tsuk el az 'optonIndex'-et az 'availableOptions' t√∂mbb≈ël, hogy a v√°lasz ne ism√©tl≈ëdj√∂n meg
    availableOptions.splice(index2, 1);
    const option = document.createElement("div");
    option.innerHTML = currentQuestion.options[optonIndex];
    option.id = optonIndex;
    option.style.animationDelay = animationDelay + "s";
    animationDelay = animationDelay + 0.15;
    option.className = "option";
    optionContainer.appendChild(option);
    option.setAttribute("onclick", "getResult(this)");
  }
  questionCounter++;
}

// az aktu√°lis pr√≥b√°lkoz√°s eredm√©ny√©nek lek√©rdez√©se
function getResult(element) {
  const id = parseInt(element.id);
  // a v√°lasz kinyer√©se a kattintott opci√≥ azonos√≠t√≥j√°nak √∂sszehasonl√≠t√°s√°val
  if (id == currentQuestion.answer) {
    // z√∂ld sz√≠n≈±re √°ll√≠tja a helyes v√°laszt
    element.classList.add("correct");
    // hozz√°adjuk a 'correct' jelz≈ët a helyes jel√∂l√©shez
    updateAnswerIndicator("correct");
    correctAnswers++;
  } else {
    // √°ll√≠tsuk be a piros h√°tt√©rsz√≠nt a helytelen v√°laszhoz
    element.classList.add("wrong");
    // adjunk 'wrong' jelz≈ët a hib√°s jel√∂l√©shez
    updateAnswerIndicator("wrong");
    // ha a v√°lasz helytelen, akkor a helyes v√°lasz megjelen√≠t√©se a z√∂ld sz√≠n hozz√°ad√°s√°val
    const optionLen = optionContainer.children.length;
    for (let i = 0; i < optionLen; i++) {
      if (parseInt(optionContainer.children[i].id) === currentQuestion.answer) {
        optionContainer.children[i].classList.add("correct");
      }
    }
  }
  attempt++;
  unclickableOptions();
}
// tedd a t√∂bbi v√°laszt kattinthatatlann√°, ha a felhaszn√°l√≥ kiv√°lasztott m√°r egy v√°laszt 
// (korl√°tozzuk a felhaszn√°l√≥t abban, hogy megv√°ltoztassa a v√°lasz√°t)
function unclickableOptions() {
  const optionLen = optionContainer.children.length;
  for (let i = 0; i < optionLen; i++) {
    optionContainer.children[i].classList.add("already-answered");
  }
}

function answersIndicator() {
  answersIndicatorContainer.innerHTML = "";
  const totalQuestion = questionLimit;
  for (let i = 0; i < totalQuestion; i++) {
    const indicator = document.createElement("div");
    answersIndicatorContainer.appendChild(indicator);
  }
}

function updateAnswerIndicator(markType) {
  answersIndicatorContainer.children[questionCounter - 1].classList.add(markType);
}

function next() {
  if (questionCounter === questionLimit) {
    quizOver();
  } else {
    getNewQuestion();
  }
}

function quizOver() {
  // a quizBox elrejt√©se
  quizBox.classList.add("hide");
  // mutassa az eredm√©nyBoxot
  resultBox.classList.remove("hide");
  quizResult();
}

// a kv√≠zeredm√©ny megjelen√≠t√©se
function quizResult() {
  resultBox.querySelector(".total-question").innerHTML = questionLimit;
  resultBox.querySelector(".total-attempt").innerHTML = attempt;
  resultBox.querySelector(".total-correct").innerHTML = correctAnswers;
  resultBox.querySelector(".total-wrong").innerHTML = attempt - correctAnswers;
  const percentage = (correctAnswers / questionLimit) * 100;
  resultBox.querySelector(".percentage").innerHTML = percentage.toFixed(2) + "%";
  resultBox.querySelector(".total-score").innerHTML = correctAnswers + " / " + questionLimit;
  let str = `<div>`;
  roundQuestions.forEach(function (item) {
    str += `<p><strong>${item.q}</strong></p>`;
    if (item.qb !== null && item.qb !== undefined && !Number.isNaN(item.qb) && item.qb !== "") {
      str += `<pre class="language-${item.qb[1]}"><code>${item.qb[0]}</code></pre>`;
    }
    str += `<p><strong>Helyes v√°lasz:</strong> ${item.options[item.answer]}</p>`;
    str += `<p><strong>Magyar√°zat:</strong> ${item.expl}</p>`;
    /* str += `<a href="${item.url[0]}" target="_blank">üîó ${item.url[1]}</a>`; */
    str += `<hr>`;
  });
  str += `</div>`;
  resultBox.querySelector(".explanation").innerHTML = str;
}

function resetQuiz() {
  roundQuestions = [];
  questionCounter = 0;
  correctAnswers = 0;
  attempt = 0;
  availableQuestions.length = 0;
}

function tryAgainQuiz() {
  // rejts√ºk el a resultBoxot
  resultBox.classList.add("hide");
  // mutassuk meg a quizBoxot
  quizBox.classList.remove("hide");
  resetQuiz();
  startQuiz();
}

function goToHome() {
  // rejts√ºk el a resultBoxot
  resultBox.classList.add("hide");
  // a homeBox megjelen√≠t√©se
  homeBox.classList.remove("hide");
  resetQuiz();
}

function goSource() {
  // rejts√ºk el a homeBoxot
  homeBox.classList.add("hide");
  // a sourceBox megjelen√≠t√©se 
  sourceBox.classList.remove("hide");
}


function goToHomeSource() {
  // rejts√ºk el a sourceBoxot
  sourceBox.classList.add("hide");
  // a homeBox megjelen√≠t√©se
  homeBox.classList.remove("hide");
}

// #### KEZD≈êPONT #####

function startQuiz() {
  // homeBox elrejt√©se
  homeBox.classList.add("hide");
  // mutasd a quizBoxot
  quizBox.classList.remove("hide");
  // el≈ësz√∂r az √∂sszes k√©rd√©st be√°ll√≠tjuk az availableQuestions t√∂mbbe
  setAvailableQuestions();
  // m√°sodszor megh√≠vjuk a getNewQuestion() f√ºggv√©nyt
  getNewQuestion();
  // a v√°laszok mutat√≥j√°nak l√©trehoz√°s√°hoz
  answersIndicator();
}

window.onload = function () {
  homeBox.querySelector(".total-question").innerHTML = questionLimit + " / " + quiz.length;
};

document.getElementById("start").addEventListener("click", startQuiz);
document.getElementById("source").addEventListener("click", goSource);
document.getElementById("next").addEventListener("click", next);
document.getElementById("tryagain").addEventListener("click", tryAgainQuiz);
document.getElementById("tryagain2").addEventListener("click", tryAgainQuiz);
document.getElementById("gotohome").addEventListener("click", startQuiz);
document.getElementById("gotohome2").addEventListener("click", startQuiz);
document.getElementById("gotohomesource").addEventListener("click", goToHomeSource);
